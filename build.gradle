plugins {
    alias(libs.plugins.android.app) apply(false)
    alias(libs.plugins.android.lib) apply(false)
    alias(libs.plugins.kotlin.jvm) apply(false)
    alias(libs.plugins.kotlin.android) apply(false)
    alias(libs.plugins.kotlin.kapt) apply(false)
    alias(libs.plugins.hilt) apply(false)
}

allprojects {

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xinline-classes"
            ]
        }
    }

    tasks.withType(Test) {
        forkEvery = 100
        testLogging {
            // set options for log level LIFECYCLE
            events "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '  ', endItem = '  '
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task runCoreUnitTests(type: Task, dependsOn: [':core:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for the core layer.'
}

task runLoginUnitTests(type: Task, dependsOn: [':login:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for the login module.'
}

task runAppUnitTests(type: Task, dependsOn: [':app:testDebugUnitTest'], group: 'verification') {
    description 'Run unit tests for the app layer.'
}

task runUnitTests(
        type: Task,
        dependsOn: [
                'runCoreUnitTests',
                'runAppUnitTests'
        ],
        group: 'verification'
) {
    description 'Run unit tests for all modules.'
}
